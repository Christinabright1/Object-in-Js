# Object-in-Js

class Character {
  constructor(name, weapon) {
    this.name = name;
    this.weapon = weapon;
  }
  attack() {
    return 'atack with ' + this.weapon
  }
}
/*Polymorphism-- is the ability to call the same method on
different object responding different way
*/

//Extend the Character class to have a Queen class. The output of the below code should be:
  class Queen extends Character{
    constructor(name,weapon, kind){
      super(name,weapon);
      this.kind= kind;
    }

    attack(){
      /* queen extends character and because queen has an attack method declared inside of it. the queen's attack method actually overrides the character attack method.  By calling super.attack(), the character (super) attack method is being called prior to the rest of what is declared inside the queen attack method.*/
      console.log(super.attack());
      return `I am the ${this.name} of ${this.kind}, now bow down to me! `
    }
  }
const victoria = new Queen('Victoria', 'army', 'hearts'); // create a new instace with the queen having (name, weapon, type). Type inlcudes: 'hearts', 'clubs', 'spades', 'diamonds'

victoria.attack() // will console.log the attack() method in Character class AND will return another string: 'I am the Victoria of hearts, now bow down to me! '


